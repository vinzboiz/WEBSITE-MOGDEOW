import { generateProductCard } from "../Common/ProductCard.js";

document.addEventListener("DOMContentLoaded", function () {
  // ‚úÖ L·∫•y c√°c ph·∫ßn t·ª≠ HTML c·∫ßn thi·∫øt t·ª´ DOM
  const categoryList = document.getElementById("categoryList");
  const priceRangeMin = document.getElementById("priceRangeMin");
  const priceRangeMax = document.getElementById("priceRangeMax");
  const priceValue = document.getElementById("priceValue");
  const filterBtn = document.getElementById("filterBtn");
  const searchResults = document.getElementById("searchResults");
  const loadMoreBtn = document.getElementById("loadMoreBtn");
  const sortPrice = document.getElementById("sortPrice");
  const searchResultText = document.getElementById("searchResultText");

  // ‚úÖ Khai b√°o c√°c bi·∫øn to√†n c·ª•c
  let minPrice = parseInt(priceRangeMin.value, 10); // Gi√° th·∫•p nh·∫•t
  let maxPrice = parseInt(priceRangeMax.value, 10); // Gi√° cao nh·∫•t
  let sortOption = "none"; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho s·∫Øp x·∫øp
  let currentIndex = 0; // Ch·ªâ m·ª•c hi·ªán t·∫°i ƒë·ªÉ ph√¢n trang
  let PRODUCTS_PER_PAGE = getProductCount(); // S·ªë s·∫£n ph·∫©m hi·ªÉn th·ªã m·ªói l·∫ßn
  let storedProducts = []; // Danh s√°ch s·∫£n ph·∫©m sau khi l·ªçc
  let originalProducts = []; // L∆∞u danh s√°ch s·∫£n ph·∫©m g·ªëc ƒë·ªÉ kh√¥i ph·ª•c khi l·ªçc l·∫°i

  // ‚úÖ H√†m l·∫•y s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã d·ª±a v√†o k√≠ch th∆∞·ªõc m√†n h√¨nh
  function getProductCount() {
    if (window.innerWidth >= 1024) return 9;
    else if (window.innerWidth >= 768) return 8;
    return 6;
  }

  // ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã khi thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh
  window.addEventListener("resize", () => {
    PRODUCTS_PER_PAGE = getProductCount();
  });

  // ‚úÖ L·∫•y tham s·ªë t·ª´ URL
  const params = new URLSearchParams(window.location.search);
  const category = params.get("category") || ""; // L·∫•y danh m·ª•c t·ª´ URL
  const query = params.get("query") || ""; // L·∫•y t·ª´ kh√≥a t√¨m ki·∫øm t·ª´ URL

  console.log("üîç Query:", query, " | Category:", category);

  // ‚úÖ X·ª≠ l√Ω d·ªØ li·ªáu ban ƒë·∫ßu (l·ªçc theo query ho·∫∑c category)
  if (query) {
    storedProducts = searchProducts(query);
    console.log(" T√¨m ki·∫øm t·ª´ kh√≥a:", query);
    searchResultText.textContent =
      storedProducts.length === 0
        ? ` Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho t·ª´ kh√≥a: "${query}"`
        : ` K·∫øt qu·∫£ t√¨m ki·∫øm cho : ${query}`;
  } else if (category) {
    storedProducts = filterProductsByCategory(category);
    searchResultText.textContent = ` K·∫øt qu·∫£ t√¨m ki·∫øm cho : ${mapCategoryToText(
      category
    )}`;
  } else {
    storedProducts = shuffleArray([...allProducts]); // N·∫øu kh√¥ng c√≥ query ho·∫∑c category, hi·ªÉn th·ªã s·∫£n ph·∫©m ng·∫´u nhi√™n
    searchResultText.textContent = " Danh s√°ch s·∫£n ph·∫©m ng·∫´u nhi√™n:";
  }

  originalProducts = [...storedProducts]; // L∆∞u b·∫£n sao c·ªßa s·∫£n ph·∫©m g·ªëc ƒë·ªÉ kh√¥i ph·ª•c khi c·∫ßn

  console.log("‚úÖ S·∫£n ph·∫©m ƒë√£ l·ªçc:", storedProducts);

  // ‚úÖ Hi·ªÉn th·ªã s·∫£n ph·∫©m ban ƒë·∫ßu
  displayProducts();

  // ‚úÖ C·∫≠p nh·∫≠t gi√° khi k√©o thanh l·ªçc gi√°
  priceRangeMin.addEventListener("input", updatePriceText);
  priceRangeMax.addEventListener("input", updatePriceText);

  function updatePriceText() {
    minPrice = parseInt(priceRangeMin.value, 10);
    maxPrice = parseInt(priceRangeMax.value, 10);
    priceValue.textContent = `${minPrice.toLocaleString()} ƒë - ${maxPrice.toLocaleString()} ƒë`;
  }

  // ‚úÖ L·ªçc s·∫£n ph·∫©m theo gi√°
  filterBtn.addEventListener("click", function () {
    minPrice = parseInt(priceRangeMin.value, 10);
    maxPrice = parseInt(priceRangeMax.value, 10);
    console.log(`üîç L·ªçc theo gi√° t·ª´ ${minPrice} ƒë ƒë·∫øn ${maxPrice} ƒë`);

    storedProducts = filterByPriceAndSort(
      originalProducts,
      minPrice,
      maxPrice,
      sortOption
    );

    displayProducts();
  });

  // ‚úÖ S·∫Øp x·∫øp s·∫£n ph·∫©m theo gi√°
  sortPrice.addEventListener("change", function () {
    sortOption = sortPrice.value;
    console.log("üîÑ S·∫Øp x·∫øp gi√° theo:", sortOption);

    storedProducts = filterByPriceAndSort(
      storedProducts,
      minPrice,
      maxPrice,
      sortOption
    );

    displayProducts();
  });

  // ‚úÖ X·ª≠ l√Ω n√∫t "Xem th√™m"
  loadMoreBtn.addEventListener("click", function () {
    currentIndex += PRODUCTS_PER_PAGE;
    displayProducts(false);
  });

  // ‚úÖ Hi·ªÉn th·ªã s·∫£n ph·∫©m v·ªõi ph√¢n trang
  function displayProducts(reset = true) {
    if (reset) {
      searchResults.innerHTML = "";
      currentIndex = 0;
    }

    let productsToShow = storedProducts.slice(
      currentIndex,
      currentIndex + PRODUCTS_PER_PAGE
    );

    if (productsToShow.length === 0) {
      loadMoreBtn.style.display = "none";
      return;
    }

    searchResults.innerHTML += productsToShow.map(generateProductCard).join("");

    loadMoreBtn.style.display =
      currentIndex + PRODUCTS_PER_PAGE >= storedProducts.length
        ? "none"
        : "block";
  }

  // ‚úÖ L·ªçc s·∫£n ph·∫©m theo gi√° v√† s·∫Øp x·∫øp
  function filterByPriceAndSort(products, minPrice, maxPrice, sortOption) {
    let filteredProducts = products.filter((product) => {
      let productPrice = parseInt(product.price.replace(/[^\d]/g, ""), 10);
      return productPrice >= minPrice && productPrice <= maxPrice;
    });

    if (sortOption === "asc") {
      filteredProducts.sort(
        (a, b) =>
          parseInt(a.price.replace(/[^\d]/g, ""), 10) -
          parseInt(b.price.replace(/[^\d]/g, ""), 10)
      );
    } else if (sortOption === "desc") {
      filteredProducts.sort(
        (a, b) =>
          parseInt(b.price.replace(/[^\d]/g, ""), 10) -
          parseInt(a.price.replace(/[^\d]/g, ""), 10)
      );
    }

    return filteredProducts;
  }

  // ‚úÖ X·ª≠ l√Ω khi nh·∫•n v√†o danh m·ª•c tr√™n Sidebar
  if (categoryList) {
    categoryList.addEventListener("click", function (event) {
      let clickedCategory = event.target
        .closest("li")
        ?.getAttribute("data-category");

      if (!clickedCategory) return;

      console.log("üìå Ch·ªçn danh m·ª•c t·ª´ Sidebar:", clickedCategory);

      window.location.href = `search.html?category=${encodeURIComponent(
        clickedCategory
      )}`;
    });
  }

  // ‚úÖ X√°o tr·ªôn danh s√°ch s·∫£n ph·∫©m
  function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }

  // ‚úÖ Chuy·ªÉn m√£ danh m·ª•c sang vƒÉn b·∫£n
  function mapCategoryToText(category) {
    const categoryMap = {
      dog: "Ch√≥ c·∫£nh",
      cat: "M√®o c·∫£nh",
      food: "Th·ª©c ƒÉn & Th·ª±c ph·∫©m dinh d∆∞·ª°ng",
      hygiene: "V·ªá sinh & ChƒÉm s√≥c",
      accessories: "ƒê·ªì d√πng, ƒê·ªì ch∆°i & Ph·ª• ki·ªán",
      housing: "Chu·ªìng, Balo & ƒê·ªám",
      medicine: "Thu·ªëc & Th·ª±c ph·∫©m ch·ª©c nƒÉng",
      "all-pet": "T·∫•t c·∫£ th√∫ c∆∞ng",
      "all-accessories": "T·∫•t c·∫£ ph·ª• ki·ªán th√∫ c∆∞ng",
    };
    return categoryMap[category] || "To√†n b·ªô s·∫£n ph·∫©m";
  }
});
