document.addEventListener("DOMContentLoaded", function () {
  // ‚úÖ Ki·ªÉm tra xem d·ªØ li·ªáu s·∫£n ph·∫©m c√≥ ƒë∆∞·ª£c t·∫£i hay ch∆∞a
  if (typeof allProducts === "undefined") {
    console.error(
      "üö® D·ªØ li·ªáu s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c t·∫£i. Ki·ªÉm tra ProductData.js."
    );
    return;
  }

  // ‚úÖ L·∫•y tham s·ªë t·ª´ URL (query ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m, category ƒë·ªÉ l·ªçc danh m·ª•c)
  const params = new URLSearchParams(window.location.search);
  const category = params.get("category");
  const query = params.get("query");

  // ‚úÖ L·∫•y c√°c ph·∫ßn t·ª≠ HTML c·∫ßn thi·∫øt ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu
  const searchResultText = document.getElementById("searchResultText");
  const searchResults = document.getElementById("searchResults");
  const loadMoreBtn = document.getElementById("loadMoreBtn");

  // ‚úÖ Khai b√°o bi·∫øn l∆∞u k·∫øt qu·∫£ t√¨m ki·∫øm v√† tr·∫°ng th√°i ph√¢n trang
  let results = [];
  let currentIndex = 0;
  let PRODUCTS_PER_PAGE = getProductCount(); // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã m·ªói l·∫ßn

  console.log("üîç Query:", query, " | Category:", category);

  // ‚úÖ X·ª≠ l√Ω t√¨m ki·∫øm theo t·ª´ kh√≥a (∆∞u ti√™n t√¨m ki·∫øm h∆°n category)
  if (query) {
    results = searchProducts(query);
    console.log("üîé T√¨m ki·∫øm t·ª´ kh√≥a:", query);

    // ‚úÖ Ki·ªÉm tra n·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ kh√≥a
    if (results.length === 0) {
      searchResultText.textContent = `‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o cho t·ª´ kh√≥a: "${query}"`;
    } else {
      searchResultText.textContent = `üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho t·ª´ kh√≥a: "${query}"`;
    }
  }
  // ‚úÖ N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a, nh∆∞ng c√≥ danh m·ª•c, l·ªçc s·∫£n ph·∫©m theo danh m·ª•c
  else if (category) {
    results = filterProductsByCategory(category);
    searchResultText.textContent = ` K·∫øt qu·∫£ t√¨m ki·∫øm cho : "${mapCategoryToText(
      category
    )}"`;
  }
  // ‚úÖ N·∫øu kh√¥ng c√≥ g√¨ c·∫£, hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m ng·∫´u nhi√™n
  else {
    results = shuffleArray([...allProducts]); // X√°o tr·ªôn danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã ng·∫´u nhi√™n
    searchResultText.textContent = "üé≤ Danh s√°ch s·∫£n ph·∫©m ng·∫´u nhi√™n:";
  }

  // ‚úÖ Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m l√™n trang
  displaySearchResults(results);

  // ‚úÖ G·ªçi s·ª± ki·ªán t√¨m ki·∫øm tr√™n Navbar sau khi header ƒë√£ load xong
  setTimeout(initSearchEvents, 500);

  /**
   * ‚úÖ Hi·ªÉn th·ªã s·∫£n ph·∫©m v·ªõi ph√¢n trang
   * @param {Array} products - Danh s√°ch s·∫£n ph·∫©m c·∫ßn hi·ªÉn th·ªã
   * @param {Boolean} reset - N·∫øu true, s·∫Ω reset l·∫°i danh s√°ch s·∫£n ph·∫©m hi·ªÉn th·ªã
   */
  function displaySearchResults(products, reset = true) {
    if (reset) {
      searchResults.innerHTML = ""; // X√≥a danh s√°ch c≈©
      currentIndex = 0; // Reset index
    }

    // ‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m theo trang hi·ªán t·∫°i
    let productsToShow = products.slice(
      currentIndex,
      currentIndex + PRODUCTS_PER_PAGE
    );
    searchResults.innerHTML += productsToShow.map(generateProductCard).join(""); // Ch√®n s·∫£n ph·∫©m v√†o HTML

    // ‚úÖ Ki·ªÉm tra n·∫øu c√≤n s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã hay kh√¥ng
    loadMoreBtn.style.display =
      currentIndex + PRODUCTS_PER_PAGE >= products.length ? "none" : "block";
  }
});

/**
 * ‚úÖ H√†m kh·ªüi ƒë·ªông s·ª± ki·ªán t√¨m ki·∫øm
 */
function initSearchEvents() {
  console.log("üîç Kh·ªüi ƒë·ªông s·ª± ki·ªán t√¨m ki·∫øm...");

  const searchInput = document.getElementById("searchInputHeader");
  const searchButton = document.getElementById("searchButtonHeader");

  if (!searchInput || !searchButton) {
    console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ t√¨m ki·∫øm.");
    return;
  }

  /**
   * ‚úÖ X·ª≠ l√Ω t√¨m ki·∫øm khi ng∆∞·ªùi d√πng nh·∫≠p t·ª´ kh√≥a
   */
  function handleSearch() {
    const query = searchInput.value.trim();
    if (query) {
      console.log(`üîé ƒêang t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a: ${query}`);
      window.location.href = `search.html?query=${encodeURIComponent(query)}`;
    } else {
      alert("‚ùó Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!");
    }
  }

  // ‚úÖ G√°n s·ª± ki·ªán click v√†o n√∫t t√¨m ki·∫øm
  searchButton.addEventListener("click", handleSearch);

  // ‚úÖ G√°n s·ª± ki·ªán nh·∫•n ph√≠m Enter trong √¥ t√¨m ki·∫øm
  searchInput.addEventListener("keypress", function (event) {
    if (event.key === "Enter") {
      handleSearch();
    }
  });

  console.log("‚úÖ S·ª± ki·ªán t√¨m ki·∫øm ƒë√£ ƒë∆∞·ª£c g√°n!");
}

/**
 * ‚úÖ H√†m t√¨m ki·∫øm s·∫£n ph·∫©m d·ª±a tr√™n t·ª´ kh√≥a (h·ªó tr·ª£ t√¨m ki·∫øm kh√¥ng d·∫•u)
 * @param {string} query - T·ª´ kh√≥a t√¨m ki·∫øm
 * @returns {Array} - Danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p
 */
function searchProducts(query) {
  query = query.toLowerCase().trim();
  const queryNoTone = removeVietnameseTones(query);

  let exactMatch = [];
  let noToneMatch = [];

  allProducts.forEach((product) => {
    const productName = product.name.toLowerCase();
    const productNameNoTone = removeVietnameseTones(productName);

    if (productName.includes(query)) {
      exactMatch.push(product);
    } else if (productNameNoTone.includes(queryNoTone)) {
      noToneMatch.push(product);
    }
  });

  return [...exactMatch, ...noToneMatch];
}

/**
 * ‚úÖ L·ªçc s·∫£n ph·∫©m theo danh m·ª•c
 * @param {string} category - Danh m·ª•c s·∫£n ph·∫©m
 * @returns {Array} - Danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
 */
function filterProductsByCategory(category) {
  if (category === "all") return shuffleArray([...allProducts]);
  if (category === "all-pet")
    return allProducts.filter(
      (p) => p.category === "dog" || p.category === "cat"
    );
  if (category === "all-accessories")
    return allProducts.filter((p) =>
      ["food", "hygiene", "accessories", "housing", "medicine"].includes(
        p.category
      )
    );

  return allProducts.filter((p) => p.category === category);
}

/**
 * ‚úÖ T·∫°o HTML s·∫£n ph·∫©m
 * @param {Object} product - ƒê·ªëi t∆∞·ª£ng s·∫£n ph·∫©m
 * @returns {string} - HTML s·∫£n ph·∫©m
 */
function generateProductCard(product) {
  return `
      <div class="product-card" >
        <div class="image-container">
          <img class="product-image" src="${product.src}" alt="${product.name}" />
          <a  class="view-now" href="${product.href}">Xem ngay</a>
        </div>
        <div class="product-details">
          <p class="product-name">${product.name}</p>
          <p class="product-price">${product.price}</p>
        </div>
      </div>
    `;
}

/**
 * ‚úÖ X√°o tr·ªôn danh s√°ch s·∫£n ph·∫©m
 * @param {Array} array - M·∫£ng s·∫£n ph·∫©m
 * @returns {Array} - M·∫£ng ƒë√£ ƒë∆∞·ª£c x√°o tr·ªôn
 */
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

/**
 * ‚úÖ Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
 * @param {string} str - Chu·ªói c√≥ d·∫•u
 * @returns {string} - Chu·ªói kh√¥ng d·∫•u
 */
function removeVietnameseTones(str) {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D")
    .replace(/[^\w\s]/g, "")
    .replace(/\s+/g, " ")
    .trim();
}

/**
 * ‚úÖ Chuy·ªÉn m√£ danh m·ª•c sang vƒÉn b·∫£n ti·∫øng Vi·ªát
 */
function mapCategoryToText(category) {
  const categoryMap = {
    dog: "Ch√≥ c·∫£nh",
    cat: "M√®o c·∫£nh",
    food: "Th·ª©c ƒÉn & Th·ª±c ph·∫©m dinh d∆∞·ª°ng",
    hygiene: "V·ªá sinh & ChƒÉm s√≥c",
    accessories: "ƒê·ªì d√πng, ƒê·ªì ch∆°i & Ph·ª• ki·ªán",
    housing: "Chu·ªìng, Balo & ƒê·ªám",
    medicine: "Thu·ªëc & Th·ª±c ph·∫©m ch·ª©c nƒÉng",
  };
  return categoryMap[category] || "Danh m·ª•c kh√¥ng x√°c ƒë·ªãnh";
}
